/* tslint:disable */
/* eslint-disable */
/**
 * 接口文档 - version 1.0
 *
 *
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type BaseResponse_long_ = {
  code?: number;
  data?: number;
  message?: string;
};
export type AudioFileAddRequest = {
  content?: string;
  name?: string;
  voice?: string;
};
export type BaseResponse_boolean_ = {
  code?: number;
  data?: boolean;
  message?: string;
};
export type DeleteRequest = {
  id?: number;
};
export type AudioFileVO = {
  content?: string;
  createTime?: string;
  creatorId?: number;
  id?: number;
  name?: string;
  status?:
    | 'UNKNOWN'
    | 'UPLOADING'
    | 'UPLOADED'
    | 'PROCESSING'
    | 'PROCESSED'
    | 'FAILED'
    | 'DELETED'
    | 'SYNTHESIZING'
    | 'IN_QUEUE';
  updateTime?: string;
  userId?: number;
};
export type BaseResponse_AudioFileVO_ = {
  code?: number;
  /**
   * AudioFileVO
   * ---
   */
  data?: AudioFileVO;
  message?: string;
};
export type OrderItem = {
  asc?: boolean;
  column?: string;
};
export type AudioFile = {
  content?: string;
  create_time?: string;
  creator_id?: number;
  id?: number;
  is_delete?: number;
  name?: string;
  path?: string;
  status?:
    | 'UNKNOWN'
    | 'UPLOADING'
    | 'UPLOADED'
    | 'PROCESSING'
    | 'PROCESSED'
    | 'FAILED'
    | 'DELETED'
    | 'SYNTHESIZING'
    | 'IN_QUEUE';
  update_time?: string;
};
export type Page_AudioFile_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: AudioFile[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_AudioFile_ = {
  code?: number;
  /**
   * Page«AudioFile»
   * ---
   */
  data?: Page_AudioFile_;
  message?: string;
};
export type AudioFileQueryRequest = {
  content?: string;
  current?: number;
  id?: number;
  name?: string;
  pageSize?: number;
  sortField?: string;
  sortOrder?: string;
};
export type Page_AudioFileVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: AudioFileVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_AudioFileVO_ = {
  code?: number;
  /**
   * Page«AudioFileVO»
   * ---
   */
  data?: Page_AudioFileVO_;
  message?: string;
};
export type AudioFileSynthesizeRequest = {
  id?: number;
};
export type Category = {
  createdAt?: string;
  description?: string;
  id?: number;
  isRoot?: boolean;
  name?: string;
  parentId?: number;
  sortOrder?: number;
  updatedAt?: string;
};
export type Page_Category_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Category[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_Category_ = {
  code?: number;
  /**
   * Page«Category»
   * ---
   */
  data?: Page_Category_;
  message?: string;
};
export type CategoryQueryRequest = {
  current?: number;
  description?: string;
  id?: number;
  name?: string;
  notId?: number;
  pageSize?: number;
  searchText?: string;
  sortField?: string;
  sortOrder?: string;
};
export type BaseResponse_List_Category_ = {
  code?: number;
  data?: Category[];
  message?: string;
};
export type CategoryRelativeRequest = {
  category_ids?: number[];
  dict_id?: number;
};
export type DictionaryWordAddRequest = {
  dictionary_id?: number;
  word_id?: number;
};
export type BaseResponse_Array_int_ = {
  code?: number;
  data?: number[];
  message?: string;
};
export type EnglishWordRelativeBatchRequest = {
  dictionary_id?: number;
  words?: number[];
};
export type DictionaryWordVO = {
  create_at?: string;
  dictionary_id?: number;
  id?: number;
  word_id?: number;
};
export type BaseResponse_DictionaryWordVO_ = {
  code?: number;
  /**
   * DictionaryWordVO
   * ---
   */
  data?: DictionaryWordVO;
  message?: string;
};
export type DictionaryWord = {
  created_at?: string;
  dictionary_id?: number;
  id?: number;
  word_id?: number;
};
export type BaseResponse_List_DictionaryWord_ = {
  code?: number;
  data?: DictionaryWord[];
  message?: string;
};
export type DictionaryWordQueryRequest = {
  current?: number;
  dictionary_id?: number;
  id?: number;
  notId?: number;
  pageSize?: number;
  sortField?: string;
  sortOrder?: string;
  word_id?: number;
};
export type Page_DictionaryWord_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: DictionaryWord[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_DictionaryWord_ = {
  code?: number;
  /**
   * Page«DictionaryWord»
   * ---
   */
  data?: Page_DictionaryWord_;
  message?: string;
};
export type Page_DictionaryWordVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: DictionaryWordVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_DictionaryWordVO_ = {
  code?: number;
  /**
   * Page«DictionaryWordVO»
   * ---
   */
  data?: Page_DictionaryWordVO_;
  message?: string;
};
export type EnglishDictionaryAddRequest = {
  author?: string;
  description?: string;
  image_url?: string;
  isbn?: string;
  name?: string;
  publication_date?: string;
  publisher?: string;
};
export type EnglishDictionaryVO = {
  approved_words?: number;
  author?: string;
  create_time?: string;
  description?: string;
  id?: number;
  image_url?: string;
  isbn?: string;
  name?: string;
  publication_date?: string;
  published_words?: number;
  publisher?: string;
  total_words?: number;
  update_time?: string;
};
export type BaseResponse_EnglishDictionaryVO_ = {
  code?: number;
  /**
   * EnglishDictionaryVO
   * ---
   */
  data?: EnglishDictionaryVO;
  message?: string;
};
export type EnglishDictionaryImportRequest = {
  description?: string[];
  id?: number;
};
export type EnglishDictionaryWithCategoryVO = {
  approved_words?: number;
  author?: string;
  categoryList?: Category[];
  create_time?: string;
  description?: string;
  id?: number;
  image_url?: string;
  isbn?: string;
  name?: string;
  publication_date?: string;
  published_words?: number;
  publisher?: string;
  total_words?: number;
  update_time?: string;
};
export type BaseResponse_List_EnglishDictionaryWithCategoryVO_ = {
  code?: number;
  data?: EnglishDictionaryWithCategoryVO[];
  message?: string;
};
export type EnglishDictionary = {
  approved_words?: number;
  author?: string;
  create_time?: string;
  description?: string;
  id?: number;
  image_url?: string;
  is_delete?: number;
  isbn?: string;
  name?: string;
  publication_date?: string;
  published_words?: number;
  publisher?: string;
  total_words?: number;
  update_time?: string;
};
export type Page_EnglishDictionary_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: EnglishDictionary[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_EnglishDictionary_ = {
  code?: number;
  /**
   * Page«EnglishDictionary»
   * ---
   */
  data?: Page_EnglishDictionary_;
  message?: string;
};
export type EnglishDictionaryQueryRequest = {
  author?: string;
  content?: string;
  current?: number;
  description?: string;
  id?: number;
  image_url?: string;
  isbn?: string;
  name?: string;
  notId?: number;
  pageSize?: number;
  publication_date?: string;
  publisher?: string;
  searchText?: string;
  sortField?: string;
  sortOrder?: string;
  tags?: string[];
  title?: string;
  userId?: number;
};
export type Page_EnglishDictionaryVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: EnglishDictionaryVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_EnglishDictionaryVO_ = {
  code?: number;
  /**
   * Page«EnglishDictionaryVO»
   * ---
   */
  data?: Page_EnglishDictionaryVO_;
  message?: string;
};
export type EnglishDictionaryUpdateRequest = {
  author?: string;
  description?: string;
  id?: number;
  image_url?: string;
  isbn?: string;
  name?: string;
  publication_date?: string;
  publisher?: string;
};
export type EnglishWordAddRequest = {
  info?: string;
  word_head?: string;
};
export type EnglishWordAddBatchRequest = {
  words?: EnglishWordAddRequest[];
};
export type EnglishWord = {
  ai_score?: number;
  create_time?: string;
  id?: number;
  info?: string;
  is_delete?: number;
  manual_score?: number;
  reviewer?: number;
  status?: string;
  update_time?: string;
  word_head?: string;
};
export type BaseResponse_EnglishWord_ = {
  code?: number;
  /**
   * EnglishWord
   * ---
   */
  data?: EnglishWord;
  message?: string;
};
export type DuplicateWordDto = {
  count?: number;
  wordHead?: string;
};
export type BaseResponse_List_DuplicateWordDto_ = {
  code?: number;
  data?: DuplicateWordDto[];
  message?: string;
};
export type WordHeadIdDto = {
  head?: string;
  id?: number;
};
export type BaseResponse_List_WordHeadIdDto_ = {
  code?: number;
  data?: WordHeadIdDto[];
  message?: string;
};
export type EnglishWordGetBatchRequest = {
  words?: string[];
};
export type UserVO = {
  createTime?: string;
  id?: number;
  userAvatar?: string;
  userName?: string;
  userProfile?: string;
  userRole?: string;
};
export type EnglishWordVO = {
  content?: string;
  createTime?: string;
  id?: number;
  status?: string;
  title?: string;
  updateTime?: string;
  /**
   * UserVO
   * ---
   */
  user?: UserVO;
  userId?: number;
};
export type BaseResponse_EnglishWordVO_ = {
  code?: number;
  /**
   * EnglishWordVO
   * ---
   */
  data?: EnglishWordVO;
  message?: string;
};
export type Page_EnglishWord_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: EnglishWord[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_EnglishWord_ = {
  code?: number;
  /**
   * Page«EnglishWord»
   * ---
   */
  data?: Page_EnglishWord_;
  message?: string;
};
export type EnglishWordQueryRequest = {
  current?: number;
  id?: number;
  notId?: number;
  pageSize?: number;
  sortField?: string;
  sortOrder?: string;
  status?: string;
  word_head?: string;
};
export type DictionaryWordWithWordVO = {
  create_at?: string;
  dictionary_id?: number;
  id?: number;
  /**
   * EnglishWord
   * ---
   */
  word?: EnglishWord;
  word_id?: number;
};
export type IPage_DictionaryWordWithWordVO_ = {
  current?: number;
  pages?: number;
  records?: DictionaryWordWithWordVO[];
  size?: number;
  total?: number;
};
export type BaseResponse_IPage_DictionaryWordWithWordVO_ = {
  code?: number;
  /**
   * IPage«DictionaryWordWithWordVO»
   * ---
   */
  data?: IPage_DictionaryWordWithWordVO_;
  message?: string;
};
export type EnglishWordQueryDictRequest = {
  current?: number;
  dict_id?: string;
  id?: number;
  notId?: number;
  pageSize?: number;
  searchText?: string;
  sortField?: string;
  sortOrder?: string;
  status?: string;
  userId?: number;
};
export type Page_EnglishWordVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: EnglishWordVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_EnglishWordVO_ = {
  code?: number;
  /**
   * Page«EnglishWordVO»
   * ---
   */
  data?: Page_EnglishWordVO_;
  message?: string;
};
export type WordStatusChange = {
  comment?: string;
  createTime?: string;
  id?: number;
  info?: string;
  isDelete?: number;
  status?: string;
  updateTime?: string;
  wordId?: number;
};
export type BaseResponse_WordStatusChange_ = {
  code?: number;
  /**
   * WordStatusChange
   * ---
   */
  data?: WordStatusChange;
  message?: string;
};
export type BaseResponse_object_ = {
  code?: number;
  data?: object;
  message?: string;
};
export type EnglishWordScoreRequest = {
  id?: number;
  score?: number;
};
export type EnglishWordUpdateRequest = {
  draft?: boolean;
  id?: number;
  info?: string;
  word_head?: string;
};
export type EnglishWordChangeLogVO = {
  content?: string;
  createTime?: string;
  id?: number;
  tagList?: string[];
  title?: string;
  updateTime?: string;
  /**
   * UserVO
   * ---
   */
  user?: UserVO;
  userId?: number;
};
export type BaseResponse_EnglishWordChangeLogVO_ = {
  code?: number;
  /**
   * EnglishWordChangeLogVO
   * ---
   */
  data?: EnglishWordChangeLogVO;
  message?: string;
};
export type EnglishWordChangeLog = {
  change_time?: string;
  changed_by?: number;
  english_word_id?: number;
  field_name?: string;
  id?: number;
  new_value?: string;
  old_value?: string;
};
export type Page_EnglishWordChangeLog_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: EnglishWordChangeLog[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_EnglishWordChangeLog_ = {
  code?: number;
  /**
   * Page«EnglishWordChangeLog»
   * ---
   */
  data?: Page_EnglishWordChangeLog_;
  message?: string;
};
export type EnglishWordChangeLogQueryRequest = {
  content?: string;
  current?: number;
  id?: number;
  notId?: number;
  pageSize?: number;
  searchText?: string;
  sortField?: string;
  sortOrder?: string;
  tags?: string[];
  title?: string;
  userId?: number;
};
export type Page_EnglishWordChangeLogVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: EnglishWordChangeLogVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_EnglishWordChangeLogVO_ = {
  code?: number;
  /**
   * Page«EnglishWordChangeLogVO»
   * ---
   */
  data?: Page_EnglishWordChangeLogVO_;
  message?: string;
};
export type ExamCategory = {
  createdAt?: string;
  createdBy?: number;
  deletedAt?: string;
  id?: number;
  isDeleted?: boolean;
  name?: string;
  parentId?: number;
  sortOrder?: number;
  updatedAt?: string;
  updatedBy?: number;
};
export type ExamCategoryPaper = {
  categoryId?: number;
  createdAt?: string;
  id?: number;
  paperId?: number;
  sortOrder?: number;
  updatedAt?: string;
};
export type ExamOperationLog = {
  action?: object;
  description?: string;
  id?: number;
  ipAddress?: string;
  operationTime?: string;
  operatorId?: number;
  recordId?: number;
  tableName?: string;
};
export type ExamPaper = {
  createdAt?: string;
  createdBy?: number;
  deletedAt?: string;
  description?: string;
  id?: number;
  isDeleted?: boolean;
  name?: string;
  price?: number;
  status?: object;
  thumbnailUrl?: string;
  totalQuestions?: number;
  updatedAt?: string;
  updatedBy?: number;
};
export type ExamPaperQuestion = {
  createdAt?: string;
  id?: number;
  paperId?: number;
  questionId?: number;
  sortOrder?: number;
  updatedAt?: string;
};
export type ExamPaperStats = {
  attemptCount?: number;
  averageScore?: number;
  downloadCount?: number;
  id?: number;
  paperId?: number;
  updatedAt?: string;
  viewCount?: number;
};
export type ExamPaperTag = {
  createdAt?: string;
  id?: number;
  paperId?: number;
  tagId?: number;
};
export type ExamPaperVersion = {
  content?: string;
  createdAt?: string;
  createdBy?: number;
  id?: number;
  paperId?: number;
  versionNumber?: number;
};
export type ExamQuestion = {
  answer?: string;
  createdAt?: string;
  explanation?: string;
  id?: number;
  options?: string;
  questionText?: string;
  questionType?: object;
  updatedAt?: string;
};
export type ExamTag = {
  createdAt?: string;
  id?: number;
  name?: string;
};
export type BaseResponse_string_ = {
  code?: number;
  data?: string;
  message?: string;
};
export type SseEmitter = {
  timeout?: number;
};
export type MediaCreatorAddRequest = {
  mediaType?: 'LIVE' | 'IMAGE' | 'VIDEO' | 'AUDIO' | 'STATIC_VIDEO';
  wordId?: number;
};
export type MediaCreatorVO = {
  createdAt?: string;
  creatorId?: number;
  id?: number;
  info?: string;
  mediaType?: string;
  mediaUrl?: string;
  /**
   * UserVO
   * ---
   */
  user?: UserVO;
  wordId?: number;
};
export type BaseResponse_MediaCreatorVO_ = {
  code?: number;
  /**
   * MediaCreatorVO
   * ---
   */
  data?: MediaCreatorVO;
  message?: string;
};
export type MediaCreator = {
  created_at?: string;
  creator_id?: number;
  id?: number;
  info?: string;
  media_type?: string;
  media_url?: string;
  word_id?: number;
};
export type Page_MediaCreator_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: MediaCreator[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_MediaCreator_ = {
  code?: number;
  /**
   * Page«MediaCreator»
   * ---
   */
  data?: Page_MediaCreator_;
  message?: string;
};
export type MediaCreatorQueryRequest = {
  current?: number;
  id?: number;
  mediaType?: string;
  mediaUrl?: string;
  notId?: number;
  pageSize?: number;
  sortField?: string;
  sortOrder?: string;
  userId?: number;
  wordId?: number;
};
export type Page_MediaCreatorVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: MediaCreatorVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_MediaCreatorVO_ = {
  code?: number;
  /**
   * Page«MediaCreatorVO»
   * ---
   */
  data?: Page_MediaCreatorVO_;
  message?: string;
};
export type PostAddRequest = {
  content?: string;
  tags?: string[];
  title?: string;
};
export type PostEditRequest = {
  content?: string;
  id?: number;
  tags?: string[];
  title?: string;
};
export type PostVO = {
  content?: string;
  createTime?: string;
  favourNum?: number;
  hasFavour?: boolean;
  hasThumb?: boolean;
  id?: number;
  tagList?: string[];
  thumbNum?: number;
  title?: string;
  updateTime?: string;
  /**
   * UserVO
   * ---
   */
  user?: UserVO;
  userId?: number;
};
export type BaseResponse_PostVO_ = {
  code?: number;
  /**
   * PostVO
   * ---
   */
  data?: PostVO;
  message?: string;
};
export type Post = {
  content?: string;
  createTime?: string;
  favourNum?: number;
  id?: number;
  isDelete?: number;
  tags?: string;
  thumbNum?: number;
  title?: string;
  updateTime?: string;
  userId?: number;
};
export type Page_Post_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Post[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_Post_ = {
  code?: number;
  /**
   * Page«Post»
   * ---
   */
  data?: Page_Post_;
  message?: string;
};
export type PostQueryRequest = {
  content?: string;
  current?: number;
  favourUserId?: number;
  id?: number;
  notId?: number;
  orTags?: string[];
  pageSize?: number;
  searchText?: string;
  sortField?: string;
  sortOrder?: string;
  tags?: string[];
  title?: string;
  userId?: number;
};
export type Page_PostVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: PostVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_PostVO_ = {
  code?: number;
  /**
   * Page«PostVO»
   * ---
   */
  data?: Page_PostVO_;
  message?: string;
};
export type PostUpdateRequest = {
  content?: string;
  id?: number;
  tags?: string[];
  title?: string;
};
export type BaseResponse_int_ = {
  code?: number;
  data?: number;
  message?: string;
};
export type PostFavourAddRequest = {
  postId?: number;
};
export type PostFavourQueryRequest = {
  current?: number;
  pageSize?: number;
  /**
   * PostQueryRequest
   * ---
   */
  postQueryRequest?: PostQueryRequest;
  sortField?: string;
  sortOrder?: string;
  userId?: number;
};
export type PostThumbAddRequest = {
  postId?: number;
};
export type UserAddRequest = {
  userAccount?: string;
  userAvatar?: string;
  userName?: string;
  userRole?: string;
};
export type User = {
  createTime?: string;
  id?: number;
  isDelete?: number;
  mpOpenId?: string;
  unionId?: string;
  updateTime?: string;
  userAccount?: string;
  userAvatar?: string;
  userName?: string;
  userPassword?: string;
  userProfile?: string;
  userRole?: string;
};
export type BaseResponse_User_ = {
  code?: number;
  /**
   * User
   * ---
   */
  data?: User;
  message?: string;
};
export type LoginUserVO = {
  createTime?: string;
  id?: number;
  updateTime?: string;
  userAvatar?: string;
  userName?: string;
  userProfile?: string;
  userRole?: string;
};
export type BaseResponse_LoginUserVO_ = {
  code?: number;
  /**
   * LoginUserVO
   * ---
   */
  data?: LoginUserVO;
  message?: string;
};
export type BaseResponse_UserVO_ = {
  code?: number;
  /**
   * UserVO
   * ---
   */
  data?: UserVO;
  message?: string;
};
export type Page_User_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: User[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_User_ = {
  code?: number;
  /**
   * Page«User»
   * ---
   */
  data?: Page_User_;
  message?: string;
};
export type UserQueryRequest = {
  current?: number;
  id?: number;
  mpOpenId?: string;
  pageSize?: number;
  sortField?: string;
  sortOrder?: string;
  unionId?: string;
  userName?: string;
  userProfile?: string;
  userRole?: string;
};
export type Page_UserVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: UserVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_UserVO_ = {
  code?: number;
  /**
   * Page«UserVO»
   * ---
   */
  data?: Page_UserVO_;
  message?: string;
};
export type SaTokenInfo = {
  isLogin?: boolean;
  loginDeviceType?: string;
  loginId?: object;
  loginType?: string;
  sessionTimeout?: number;
  tag?: string;
  tokenActiveTimeout?: number;
  tokenName?: string;
  tokenSessionTimeout?: number;
  tokenTimeout?: number;
  tokenValue?: string;
};
export type AuthUserVO = {
  /**
   * SaTokenInfo
   * ---
   */
  token?: SaTokenInfo;
  /**
   * LoginUserVO
   * ---
   */
  user?: LoginUserVO;
};
export type BaseResponse_AuthUserVO_ = {
  code?: number;
  /**
   * AuthUserVO
   * ---
   */
  data?: AuthUserVO;
  message?: string;
};
export type UserLoginRequest = {
  deviceId?: string;
  deviceType?: string;
  platform?: string;
  userAccount?: string;
  userPassword?: string;
};
export type UserRegisterRequest = {
  checkPassword?: string;
  userAccount?: string;
  userPassword?: string;
};
export type UserUpdateRequest = {
  id?: number;
  userAvatar?: string;
  userName?: string;
  userProfile?: string;
  userRole?: string;
};
export type UserUpdateMyRequest = {
  userAvatar?: string;
  userName?: string;
  userProfile?: string;
};
export type UserConfigVO = {
  privateConfig?: object;
  publicConfig?: object;
};
export type BaseResponse_UserConfigVO_ = {
  code?: number;
  /**
   * UserConfigVO
   * ---
   */
  data?: UserConfigVO;
  message?: string;
};
export type WordStatusChangeVO = {
  comment?: string;
  createTime?: string;
  id?: number;
  info?: string;
  status?:
    | 'UNKNOWN'
    | 'DRAFT'
    | 'CREATED'
    | 'PROCESSING'
    | 'SUPPLYING'
    | 'SUPPLIED'
    | 'STRUCTURE_FIXING'
    | 'STRUCTURED'
    | 'IMAGING'
    | 'PROCESSED'
    | 'WAIT_FOR_AI_REVIEW'
    | 'REVIEWING'
    | 'DATA_FORMAT_ERROR'
    | 'REJECTED'
    | 'FAILED'
    | 'PUBLISHED'
    | 'UNPUBLISHED'
    | 'APPROVED'
    | 'UPLOADED'
    | 'UPLOADING'
    | 'IMPORTING'
    | 'EXPORTING'
    | 'EXPORTED'
    | 'DELETED'
    | 'IN_QUEUE';
  updateTime?: string;
  wordId?: number;
  word_head?: string;
};
export type Page_WordStatusChangeVO_ = {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: WordStatusChangeVO[];
  searchCount?: boolean;
  size?: number;
  total?: number;
};
export type BaseResponse_Page_WordStatusChangeVO_ = {
  code?: number;
  /**
   * Page«WordStatusChangeVO»
   * ---
   */
  data?: Page_WordStatusChangeVO_;
  message?: string;
};
export type EnglishWordStatusChangeQueryRequest = {
  comment?: string;
  current?: number;
  id?: number;
  pageSize?: number;
  sortField?: string;
  sortOrder?: string;
};
declare global {
  interface Apis {
    wxMpController: {
      /**
       * ---
       *
       * [GET] check
       *
       * **path:** /api/
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // echostr
       *   echostr?: string
       *   // nonce
       *   nonce?: string
       *   // signature
       *   signature?: string
       *   // timestamp
       *   timestamp?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string
       * ```
       */
      checkUsingGET<
        Config extends Alova2MethodConfig<string> & {
          params: {
            /**
             * echostr
             */
            echostr?: string;
            /**
             * nonce
             */
            nonce?: string;
            /**
             * signature
             */
            signature?: string;
            /**
             * timestamp
             */
            timestamp?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'wxMpController.checkUsingGET', Config>;
      /**
       * ---
       *
       * [POST] receiveMessage
       *
       * **path:** /api/
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      receiveMessageUsingPOST<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'wxMpController.receiveMessageUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] setMenu
       *
       * **path:** /api/setMenu
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string
       * ```
       */
      setMenuUsingGET<Config extends Alova2MethodConfig<string>>(
        config?: Config
      ): Alova2Method<string, 'wxMpController.setMenuUsingGET', Config>;
    };
    audioFileController: {
      /**
       * ---
       *
       * [POST] addAudioFile
       *
       * **path:** /api/audio_file/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   name?: string
       *   voice?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      addAudioFileUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_long_> & {
          data: AudioFileAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_long_, 'audioFileController.addAudioFileUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] deleteAudioFile
       *
       * **path:** /api/audio_file/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      deleteAudioFileUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'audioFileController.deleteAudioFileUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] getAudioFileVOById
       *
       * **path:** /api/audio_file/get/vo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] AudioFileVO
       *   data?: {
       *     content?: string
       *     createTime?: string
       *     creatorId?: number
       *     id?: number
       *     name?: string
       *     status?:
       *       | 'UNKNOWN'
       *       | 'UPLOADING'
       *       | 'UPLOADED'
       *       | 'PROCESSING'
       *       | 'PROCESSED'
       *       | 'FAILED'
       *       | 'DELETED'
       *       | 'SYNTHESIZING'
       *       | 'IN_QUEUE'
       *     updateTime?: string
       *     userId?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      getAudioFileVOByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_AudioFileVO_> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_AudioFileVO_, 'audioFileController.getAudioFileVOByIdUsingGET', Config>;
      /**
       * ---
       *
       * [POST] listAudioFileByPage
       *
       * **path:** /api/audio_file/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   id?: number
       *   name?: string
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«AudioFile»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       create_time?: string
       *       creator_id?: number
       *       id?: number
       *       is_delete?: number
       *       name?: string
       *       path?: string
       *       status?:
       *         | 'UNKNOWN'
       *         | 'UPLOADING'
       *         | 'UPLOADED'
       *         | 'PROCESSING'
       *         | 'PROCESSED'
       *         | 'FAILED'
       *         | 'DELETED'
       *         | 'SYNTHESIZING'
       *         | 'IN_QUEUE'
       *       update_time?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listAudioFileByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_AudioFile_> & {
          data: AudioFileQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_AudioFile_, 'audioFileController.listAudioFileByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] listAudioFileVOByPage
       *
       * **path:** /api/audio_file/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   id?: number
       *   name?: string
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«AudioFileVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       creatorId?: number
       *       id?: number
       *       name?: string
       *       status?:
       *         | 'UNKNOWN'
       *         | 'UPLOADING'
       *         | 'UPLOADED'
       *         | 'PROCESSING'
       *         | 'PROCESSED'
       *         | 'FAILED'
       *         | 'DELETED'
       *         | 'SYNTHESIZING'
       *         | 'IN_QUEUE'
       *       updateTime?: string
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listAudioFileVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_AudioFileVO_> & {
          data: AudioFileQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_AudioFileVO_, 'audioFileController.listAudioFileVOByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] searchAudioFile
       *
       * **path:** /api/audio_file/search
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   id?: number
       *   name?: string
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«AudioFileVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       creatorId?: number
       *       id?: number
       *       name?: string
       *       status?:
       *         | 'UNKNOWN'
       *         | 'UPLOADING'
       *         | 'UPLOADED'
       *         | 'PROCESSING'
       *         | 'PROCESSED'
       *         | 'FAILED'
       *         | 'DELETED'
       *         | 'SYNTHESIZING'
       *         | 'IN_QUEUE'
       *       updateTime?: string
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      searchAudioFileUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_AudioFileVO_> & {
          data: AudioFileQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_AudioFileVO_, 'audioFileController.searchAudioFileUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] synthesize
       *
       * **path:** /api/audio_file/synthesize
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      synthesizeUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: AudioFileSynthesizeRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'audioFileController.synthesizeUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] uploadAudioFile
       *
       * **path:** /api/audio_file/upload
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   id?: number
       *   name?: string
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      uploadAudioFileUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: AudioFileQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'audioFileController.uploadAudioFileUsingPOST', Config>;
    };
    categoryController: {
      /**
       * ---
       *
       * [POST] addCategory
       *
       * **path:** /api/category/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   createdAt?: string
       *   description?: string
       *   id?: number
       *   isRoot?: boolean
       *   name?: string
       *   parentId?: number
       *   sortOrder?: number
       *   updatedAt?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      addCategoryUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: Category;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'categoryController.addCategoryUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] deleteCategory
       *
       * **path:** /api/category/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      deleteCategoryUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'categoryController.deleteCategoryUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] listCategoryByPage
       *
       * **path:** /api/category/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   description?: string
       *   id?: number
       *   name?: string
       *   notId?: number
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«Category»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       createdAt?: string
       *       description?: string
       *       id?: number
       *       isRoot?: boolean
       *       name?: string
       *       parentId?: number
       *       sortOrder?: number
       *       updatedAt?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listCategoryByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_Category_> & {
          data: CategoryQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_Category_, 'categoryController.listCategoryByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/category/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   createdAt?: string
       *   description?: string
       *   id?: number
       *   isRoot?: boolean
       *   name?: string
       *   parentId?: number
       *   sortOrder?: number
       *   updatedAt?: string
       * }
       * ```
       */
      selectOneUsingGET<
        Config extends Alova2MethodConfig<Category> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Category, 'categoryController.selectOneUsingGET', Config>;
      /**
       * ---
       *
       * [POST] updateCategory
       *
       * **path:** /api/category/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   createdAt?: string
       *   description?: string
       *   id?: number
       *   isRoot?: boolean
       *   name?: string
       *   parentId?: number
       *   sortOrder?: number
       *   updatedAt?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      updateCategoryUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: Category;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'categoryController.updateCategoryUsingPOST', Config>;
    };
    dictionaryCategoryController: {
      /**
       * ---
       *
       * [GET] getDictionaryCategoryByDictionaryId
       *
       * **path:** /api/dictionary_category/relative
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // dict_id
       *   // [required]
       *   dict_id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: Array<{
       *     createdAt?: string
       *     description?: string
       *     id?: number
       *     isRoot?: boolean
       *     name?: string
       *     parentId?: number
       *     sortOrder?: number
       *     updatedAt?: string
       *   }>
       *   message?: string
       * }
       * ```
       */
      getDictionaryCategoryByDictionaryIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_List_Category_> & {
          params: {
            /**
             * dict_id
             * [required]
             */
            dict_id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_List_Category_,
        'dictionaryCategoryController.getDictionaryCategoryByDictionaryIdUsingGET',
        Config
      >;
      /**
       * ---
       *
       * [POST] relativeDictionaryCategory
       *
       * **path:** /api/dictionary_category/relative
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   category_ids?: number[]
       *   dict_id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      relativeDictionaryCategoryUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: CategoryRelativeRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_boolean_,
        'dictionaryCategoryController.relativeDictionaryCategoryUsingPOST',
        Config
      >;
    };
    DictionaryWord: {
      /**
       * ---
       *
       * [POST] 创建词典单词表
       *
       * **path:** /api/dictionary_word/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   dictionary_id?: number
       *   word_id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      addDictionaryWordUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_long_> & {
          data: DictionaryWordAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_long_, 'DictionaryWord.addDictionaryWordUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] 批量关联词典和单词
       *
       * **path:** /api/dictionary_word/add/batch
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   dictionary_id?: number
       *   words?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number[]
       *   message?: string
       * }
       * ```
       */
      addDictionaryWordBatchUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Array_int_> & {
          data: EnglishWordRelativeBatchRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Array_int_, 'DictionaryWord.addDictionaryWordBatchUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] 删除词典单词表
       *
       * **path:** /api/dictionary_word/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      deleteDictionaryWordUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'DictionaryWord.deleteDictionaryWordUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] 根据 id 获取词典单词表（封装类）
       *
       * **path:** /api/dictionary_word/get/vo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] DictionaryWordVO
       *   data?: {
       *     create_at?: string
       *     dictionary_id?: number
       *     id?: number
       *     word_id?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      getDictionaryWordVOByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_DictionaryWordVO_> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_DictionaryWordVO_, 'DictionaryWord.getDictionaryWordVOByIdUsingGET', Config>;
      /**
       * ---
       *
       * [POST] 根据某个词典获取对应的关系列表
       *
       * **path:** /api/dictionary_word/list/batch
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   dictionary_id?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   word_id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: Array<{
       *     created_at?: string
       *     dictionary_id?: number
       *     id?: number
       *     word_id?: number
       *   }>
       *   message?: string
       * }
       * ```
       */
      listDictionaryWordBatchUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_List_DictionaryWord_> & {
          data: DictionaryWordQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_List_DictionaryWord_, 'DictionaryWord.listDictionaryWordBatchUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] 分页获取词典单词表列表（仅管理员可用）
       *
       * **path:** /api/dictionary_word/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   dictionary_id?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   word_id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«DictionaryWord»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       created_at?: string
       *       dictionary_id?: number
       *       id?: number
       *       word_id?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listDictionaryWordByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_DictionaryWord_> & {
          data: DictionaryWordQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_DictionaryWord_, 'DictionaryWord.listDictionaryWordByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] 分页获取词典单词表列表（封装类）
       *
       * **path:** /api/dictionary_word/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   dictionary_id?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   word_id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«DictionaryWordVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       create_at?: string
       *       dictionary_id?: number
       *       id?: number
       *       word_id?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listDictionaryWordVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_DictionaryWordVO_> & {
          data: DictionaryWordQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_DictionaryWordVO_,
        'DictionaryWord.listDictionaryWordVOByPageUsingPOST',
        Config
      >;
    };
    englishDictionaryController: {
      /**
       * ---
       *
       * [POST] addEnglishDictionary
       *
       * **path:** /api/english_dictionary/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   author?: string
       *   description?: string
       *   image_url?: string
       *   isbn?: string
       *   name?: string
       *   publication_date?: string
       *   publisher?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      addEnglishDictionaryUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_long_> & {
          data: EnglishDictionaryAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_long_, 'englishDictionaryController.addEnglishDictionaryUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] deleteEnglishDictionary
       *
       * **path:** /api/english_dictionary/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      deleteEnglishDictionaryUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'englishDictionaryController.deleteEnglishDictionaryUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] getEnglishDictionaryVOById
       *
       * **path:** /api/english_dictionary/get/vo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] EnglishDictionaryVO
       *   data?: {
       *     approved_words?: number
       *     author?: string
       *     create_time?: string
       *     description?: string
       *     id?: number
       *     image_url?: string
       *     isbn?: string
       *     name?: string
       *     publication_date?: string
       *     published_words?: number
       *     publisher?: string
       *     total_words?: number
       *     update_time?: string
       *   }
       *   message?: string
       * }
       * ```
       */
      getEnglishDictionaryVOByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_EnglishDictionaryVO_> & {
          params: {
            /**
             * id
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_EnglishDictionaryVO_,
        'englishDictionaryController.getEnglishDictionaryVOByIdUsingGET',
        Config
      >;
      /**
       * ---
       *
       * [POST] importEnglishDictionary
       *
       * **path:** /api/english_dictionary/import
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   description?: string[]
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      importEnglishDictionaryUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: EnglishDictionaryImportRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'englishDictionaryController.importEnglishDictionaryUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] listEnglishDictionary
       *
       * **path:** /api/english_dictionary/list
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: Array<{
       *     approved_words?: number
       *     author?: string
       *     categoryList?: Array<{
       *       createdAt?: string
       *       description?: string
       *       id?: number
       *       isRoot?: boolean
       *       name?: string
       *       parentId?: number
       *       sortOrder?: number
       *       updatedAt?: string
       *     }>
       *     create_time?: string
       *     description?: string
       *     id?: number
       *     image_url?: string
       *     isbn?: string
       *     name?: string
       *     publication_date?: string
       *     published_words?: number
       *     publisher?: string
       *     total_words?: number
       *     update_time?: string
       *   }>
       *   message?: string
       * }
       * ```
       */
      listEnglishDictionaryUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_List_EnglishDictionaryWithCategoryVO_>
      >(
        config?: Config
      ): Alova2Method<
        BaseResponse_List_EnglishDictionaryWithCategoryVO_,
        'englishDictionaryController.listEnglishDictionaryUsingGET',
        Config
      >;
      /**
       * ---
       *
       * [POST] listEnglishDictionaryByPage
       *
       * **path:** /api/english_dictionary/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   author?: string
       *   content?: string
       *   current?: number
       *   description?: string
       *   id?: number
       *   image_url?: string
       *   isbn?: string
       *   name?: string
       *   notId?: number
       *   pageSize?: number
       *   publication_date?: string
       *   publisher?: string
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishDictionary»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       approved_words?: number
       *       author?: string
       *       create_time?: string
       *       description?: string
       *       id?: number
       *       image_url?: string
       *       is_delete?: number
       *       isbn?: string
       *       name?: string
       *       publication_date?: string
       *       published_words?: number
       *       publisher?: string
       *       total_words?: number
       *       update_time?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listEnglishDictionaryByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishDictionary_> & {
          data: EnglishDictionaryQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_EnglishDictionary_,
        'englishDictionaryController.listEnglishDictionaryByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [POST] listEnglishDictionaryVOByPage
       *
       * **path:** /api/english_dictionary/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   author?: string
       *   content?: string
       *   current?: number
       *   description?: string
       *   id?: number
       *   image_url?: string
       *   isbn?: string
       *   name?: string
       *   notId?: number
       *   pageSize?: number
       *   publication_date?: string
       *   publisher?: string
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishDictionaryVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       approved_words?: number
       *       author?: string
       *       create_time?: string
       *       description?: string
       *       id?: number
       *       image_url?: string
       *       isbn?: string
       *       name?: string
       *       publication_date?: string
       *       published_words?: number
       *       publisher?: string
       *       total_words?: number
       *       update_time?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listEnglishDictionaryVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishDictionaryVO_> & {
          data: EnglishDictionaryQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_EnglishDictionaryVO_,
        'englishDictionaryController.listEnglishDictionaryVOByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [POST] listMyEnglishDictionaryVOByPage
       *
       * **path:** /api/english_dictionary/my/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   author?: string
       *   content?: string
       *   current?: number
       *   description?: string
       *   id?: number
       *   image_url?: string
       *   isbn?: string
       *   name?: string
       *   notId?: number
       *   pageSize?: number
       *   publication_date?: string
       *   publisher?: string
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishDictionaryVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       approved_words?: number
       *       author?: string
       *       create_time?: string
       *       description?: string
       *       id?: number
       *       image_url?: string
       *       isbn?: string
       *       name?: string
       *       publication_date?: string
       *       published_words?: number
       *       publisher?: string
       *       total_words?: number
       *       update_time?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listMyEnglishDictionaryVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishDictionaryVO_> & {
          data: EnglishDictionaryQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_EnglishDictionaryVO_,
        'englishDictionaryController.listMyEnglishDictionaryVOByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [POST] updateEnglishDictionary
       *
       * **path:** /api/english_dictionary/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   author?: string
       *   description?: string
       *   id?: number
       *   image_url?: string
       *   isbn?: string
       *   name?: string
       *   publication_date?: string
       *   publisher?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      updateEnglishDictionaryUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: EnglishDictionaryUpdateRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'englishDictionaryController.updateEnglishDictionaryUsingPOST', Config>;
    };
    EnglishWords: {
      /**
       * ---
       *
       * [POST] addEnglishWord
       *
       * **path:** /api/english_word/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   info?: string
       *   word_head?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      addEnglishWordUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_long_> & {
          data: EnglishWordAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_long_, 'EnglishWords.addEnglishWordUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] addEnglishWordBatch
       *
       * **path:** /api/english_word/add/batch
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   words?: Array<{
       *     info?: string
       *     word_head?: string
       *   }>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number[]
       *   message?: string
       * }
       * ```
       */
      addEnglishWordBatchUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Array_int_> & {
          data: EnglishWordAddBatchRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Array_int_, 'EnglishWords.addEnglishWordBatchUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] deleteEnglishWord
       *
       * **path:** /api/english_word/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      deleteEnglishWordUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'EnglishWords.deleteEnglishWordUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] 根据单词获取单词数据详情
       *
       * **path:** /api/english_word/detail
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // word
       *   // [required]
       *   word: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] EnglishWord
       *   data?: {
       *     ai_score?: number
       *     create_time?: string
       *     id?: number
       *     info?: string
       *     is_delete?: number
       *     manual_score?: number
       *     reviewer?: number
       *     status?: string
       *     update_time?: string
       *     word_head?: string
       *   }
       *   message?: string
       * }
       * ```
       */
      getEnglishWordDetailUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_EnglishWord_> & {
          params: {
            /**
             * word
             * [required]
             */
            word: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_EnglishWord_, 'EnglishWords.getEnglishWordDetailUsingGET', Config>;
      /**
       * ---
       *
       * [GET] getDuplicateWords
       *
       * **path:** /api/english_word/duplicates
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: Array<{
       *     count?: number
       *     wordHead?: string
       *   }>
       *   message?: string
       * }
       * ```
       */
      getDuplicateWordsUsingGET<Config extends Alova2MethodConfig<BaseResponse_List_DuplicateWordDto_>>(
        config?: Config
      ): Alova2Method<BaseResponse_List_DuplicateWordDto_, 'EnglishWords.getDuplicateWordsUsingGET', Config>;
      /**
       * ---
       *
       * [POST] 批量获取英语单词Id
       *
       * **path:** /api/english_word/get/batch
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   words?: string[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: Array<{
       *     head?: string
       *     id?: number
       *   }>
       *   message?: string
       * }
       * ```
       */
      getEnglishWordBatchUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_List_WordHeadIdDto_> & {
          data: EnglishWordGetBatchRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_List_WordHeadIdDto_, 'EnglishWords.getEnglishWordBatchUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] getEnglishWordVOById
       *
       * **path:** /api/english_word/get/vo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] EnglishWordVO
       *   data?: {
       *     content?: string
       *     createTime?: string
       *     id?: number
       *     status?: string
       *     title?: string
       *     updateTime?: string
       *     // [title] UserVO
       *     user?: {
       *       createTime?: string
       *       id?: number
       *       userAvatar?: string
       *       userName?: string
       *       userProfile?: string
       *       userRole?: string
       *     }
       *     userId?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      getEnglishWordVOByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_EnglishWordVO_> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_EnglishWordVO_, 'EnglishWords.getEnglishWordVOByIdUsingGET', Config>;
      /**
       * ---
       *
       * [POST] 分页获取英语单词列表
       *
       * **path:** /api/english_word/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   status?: string
       *   word_head?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishWord»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       ai_score?: number
       *       create_time?: string
       *       id?: number
       *       info?: string
       *       is_delete?: number
       *       manual_score?: number
       *       reviewer?: number
       *       status?: string
       *       update_time?: string
       *       word_head?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listEnglishWordByPageUsingPOST_1<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishWord_> & {
          data: EnglishWordQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_EnglishWord_, 'EnglishWords.listEnglishWordByPageUsingPOST_1', Config>;
      /**
       * ---
       *
       * [POST] 分页获取指定词典英语单词列表
       *
       * **path:** /api/english_word/list/page/dict
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   dict_id?: string
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   status?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] IPage«DictionaryWordWithWordVO»
       *   data?: {
       *     current?: number
       *     pages?: number
       *     records?: Array<{
       *       create_at?: string
       *       dictionary_id?: number
       *       id?: number
       *       // [title] EnglishWord
       *       word?: {
       *         ai_score?: number
       *         create_time?: string
       *         id?: number
       *         info?: string
       *         is_delete?: number
       *         manual_score?: number
       *         reviewer?: number
       *         status?: string
       *         update_time?: string
       *         word_head?: string
       *       }
       *       word_id?: number
       *     }>
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listEnglishWordByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_IPage_DictionaryWordWithWordVO_> & {
          data: EnglishWordQueryDictRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_IPage_DictionaryWordWithWordVO_,
        'EnglishWords.listEnglishWordByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [POST] 分页获取封装英语单词列表
       *
       * **path:** /api/english_word/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   status?: string
       *   word_head?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishWordVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       id?: number
       *       status?: string
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listEnglishWordVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishWordVO_> & {
          data: EnglishWordQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_EnglishWordVO_, 'EnglishWords.listEnglishWordVOByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] listMyEnglishWordVOByPage
       *
       * **path:** /api/english_word/my/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   status?: string
       *   word_head?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishWordVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       id?: number
       *       status?: string
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listMyEnglishWordVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishWordVO_> & {
          data: EnglishWordQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_EnglishWordVO_, 'EnglishWords.listMyEnglishWordVOByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] publishWord
       *
       * **path:** /api/english_word/publish
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      publishWordUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          params: {
            /**
             * id
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'EnglishWords.publishWordUsingGET', Config>;
      /**
       * ---
       *
       * [GET] getScoreEnglishWord
       *
       * **path:** /api/english_word/score
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] WordStatusChange
       *   data?: {
       *     comment?: string
       *     createTime?: string
       *     id?: number
       *     info?: string
       *     isDelete?: number
       *     status?: string
       *     updateTime?: string
       *     wordId?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      getScoreEnglishWordUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_WordStatusChange_> & {
          params: {
            /**
             * id
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_WordStatusChange_, 'EnglishWords.getScoreEnglishWordUsingGET', Config>;
      /**
       * ---
       *
       * [POST] 对某个英语单词评分
       *
       * **path:** /api/english_word/score
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       *   score?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: object
       *   message?: string
       * }
       * ```
       */
      scoreEnglishWordUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_object_> & {
          data: EnglishWordScoreRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_object_, 'EnglishWords.scoreEnglishWordUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] updateEnglishWord
       *
       * **path:** /api/english_word/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   draft?: boolean
       *   id?: number
       *   info?: string
       *   word_head?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      updateEnglishWordUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: EnglishWordUpdateRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'EnglishWords.updateEnglishWordUsingPOST', Config>;
    };
    englishWordChangeLogController: {
      /**
       * ---
       *
       * [GET] getEnglishWordChangeLogVOById
       *
       * **path:** /api/english_word_change_log/get/vo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] EnglishWordChangeLogVO
       *   data?: {
       *     content?: string
       *     createTime?: string
       *     id?: number
       *     tagList?: string[]
       *     title?: string
       *     updateTime?: string
       *     // [title] UserVO
       *     user?: {
       *       createTime?: string
       *       id?: number
       *       userAvatar?: string
       *       userName?: string
       *       userProfile?: string
       *       userRole?: string
       *     }
       *     userId?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      getEnglishWordChangeLogVOByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_EnglishWordChangeLogVO_> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_EnglishWordChangeLogVO_,
        'englishWordChangeLogController.getEnglishWordChangeLogVOByIdUsingGET',
        Config
      >;
      /**
       * ---
       *
       * [POST] listEnglishWordChangeLogByPage
       *
       * **path:** /api/english_word_change_log/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishWordChangeLog»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       change_time?: string
       *       changed_by?: number
       *       english_word_id?: number
       *       field_name?: string
       *       id?: number
       *       new_value?: string
       *       old_value?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listEnglishWordChangeLogByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishWordChangeLog_> & {
          data: EnglishWordChangeLogQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_EnglishWordChangeLog_,
        'englishWordChangeLogController.listEnglishWordChangeLogByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [POST] listEnglishWordChangeLogVOByPage
       *
       * **path:** /api/english_word_change_log/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishWordChangeLogVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       id?: number
       *       tagList?: string[]
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listEnglishWordChangeLogVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishWordChangeLogVO_> & {
          data: EnglishWordChangeLogQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_EnglishWordChangeLogVO_,
        'englishWordChangeLogController.listEnglishWordChangeLogVOByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [POST] listMyEnglishWordChangeLogVOByPage
       *
       * **path:** /api/english_word_change_log/my/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   id?: number
       *   notId?: number
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«EnglishWordChangeLogVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       id?: number
       *       tagList?: string[]
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listMyEnglishWordChangeLogVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_EnglishWordChangeLogVO_> & {
          data: EnglishWordChangeLogQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_EnglishWordChangeLogVO_,
        'englishWordChangeLogController.listMyEnglishWordChangeLogVOByPageUsingPOST',
        Config
      >;
    };
    examCategoryController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_category/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   createdAt?: string
       *   createdBy?: number
       *   deletedAt?: string
       *   id?: number
       *   isDeleted?: boolean
       *   name?: string
       *   parentId?: number
       *   sortOrder?: number
       *   updatedAt?: string
       *   updatedBy?: number
       * }
       * ```
       */
      selectOneUsingGET_1<
        Config extends Alova2MethodConfig<ExamCategory> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamCategory, 'examCategoryController.selectOneUsingGET_1', Config>;
    };
    examCategoryPaperController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_category_paper/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   categoryId?: number
       *   createdAt?: string
       *   id?: number
       *   paperId?: number
       *   sortOrder?: number
       *   updatedAt?: string
       * }
       * ```
       */
      selectOneUsingGET_2<
        Config extends Alova2MethodConfig<ExamCategoryPaper> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamCategoryPaper, 'examCategoryPaperController.selectOneUsingGET_2', Config>;
    };
    examOperationLogController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_operation_log/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   action?: object
       *   description?: string
       *   id?: number
       *   ipAddress?: string
       *   operationTime?: string
       *   operatorId?: number
       *   recordId?: number
       *   tableName?: string
       * }
       * ```
       */
      selectOneUsingGET_3<
        Config extends Alova2MethodConfig<ExamOperationLog> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamOperationLog, 'examOperationLogController.selectOneUsingGET_3', Config>;
    };
    examPaperController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_paper/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   createdAt?: string
       *   createdBy?: number
       *   deletedAt?: string
       *   description?: string
       *   id?: number
       *   isDeleted?: boolean
       *   name?: string
       *   price?: number
       *   status?: object
       *   thumbnailUrl?: string
       *   totalQuestions?: number
       *   updatedAt?: string
       *   updatedBy?: number
       * }
       * ```
       */
      selectOneUsingGET_4<
        Config extends Alova2MethodConfig<ExamPaper> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamPaper, 'examPaperController.selectOneUsingGET_4', Config>;
    };
    examPaperQuestionController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_paper_question/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   createdAt?: string
       *   id?: number
       *   paperId?: number
       *   questionId?: number
       *   sortOrder?: number
       *   updatedAt?: string
       * }
       * ```
       */
      selectOneUsingGET_5<
        Config extends Alova2MethodConfig<ExamPaperQuestion> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamPaperQuestion, 'examPaperQuestionController.selectOneUsingGET_5', Config>;
    };
    examPaperStatsController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_paper_stats/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   attemptCount?: number
       *   averageScore?: number
       *   downloadCount?: number
       *   id?: number
       *   paperId?: number
       *   updatedAt?: string
       *   viewCount?: number
       * }
       * ```
       */
      selectOneUsingGET_6<
        Config extends Alova2MethodConfig<ExamPaperStats> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamPaperStats, 'examPaperStatsController.selectOneUsingGET_6', Config>;
    };
    examPaperTagController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_paper_tag/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   createdAt?: string
       *   id?: number
       *   paperId?: number
       *   tagId?: number
       * }
       * ```
       */
      selectOneUsingGET_7<
        Config extends Alova2MethodConfig<ExamPaperTag> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamPaperTag, 'examPaperTagController.selectOneUsingGET_7', Config>;
    };
    examPaperVersionController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_paper_version/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   content?: string
       *   createdAt?: string
       *   createdBy?: number
       *   id?: number
       *   paperId?: number
       *   versionNumber?: number
       * }
       * ```
       */
      selectOneUsingGET_8<
        Config extends Alova2MethodConfig<ExamPaperVersion> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamPaperVersion, 'examPaperVersionController.selectOneUsingGET_8', Config>;
    };
    examQuestionController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_question/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   answer?: string
       *   createdAt?: string
       *   explanation?: string
       *   id?: number
       *   options?: string
       *   questionText?: string
       *   questionType?: object
       *   updatedAt?: string
       * }
       * ```
       */
      selectOneUsingGET_9<
        Config extends Alova2MethodConfig<ExamQuestion> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamQuestion, 'examQuestionController.selectOneUsingGET_9', Config>;
    };
    examTagController: {
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/exam_tag/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   createdAt?: string
       *   id?: number
       *   name?: string
       * }
       * ```
       */
      selectOneUsingGET_10<
        Config extends Alova2MethodConfig<ExamTag> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<ExamTag, 'examTagController.selectOneUsingGET_10', Config>;
    };
    fileController: {
      /**
       * ---
       *
       * [POST] uploadFile
       *
       * **path:** /api/file/upload
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   biz?: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // file
       *   // [required]
       *   file: Blob
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: string
       *   message?: string
       * }
       * ```
       */
      uploadFileUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_string_> & {
          params: {
            biz?: string;
          };
          data: {
            /**
             * file
             * [required]
             */
            file: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_string_, 'fileController.uploadFileUsingPOST', Config>;
    };
    mediaCreatorController: {
      /**
       * ---
       *
       * [POST] addMediaCreator
       *
       * **path:** /api/media_creator/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   mediaType?: 'LIVE' | 'IMAGE' | 'VIDEO' | 'AUDIO' | 'STATIC_VIDEO'
       *   wordId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   timeout?: number
       * }
       * ```
       */
      addMediaCreatorUsingPOST<
        Config extends Alova2MethodConfig<SseEmitter> & {
          data: MediaCreatorAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<SseEmitter, 'mediaCreatorController.addMediaCreatorUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] deleteMediaCreator
       *
       * **path:** /api/media_creator/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      deleteMediaCreatorUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'mediaCreatorController.deleteMediaCreatorUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] getMediaCreatorVOById
       *
       * **path:** /api/media_creator/get/vo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] MediaCreatorVO
       *   data?: {
       *     createdAt?: string
       *     creatorId?: number
       *     id?: number
       *     info?: string
       *     mediaType?: string
       *     mediaUrl?: string
       *     // [title] UserVO
       *     user?: {
       *       createTime?: string
       *       id?: number
       *       userAvatar?: string
       *       userName?: string
       *       userProfile?: string
       *       userRole?: string
       *     }
       *     wordId?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      getMediaCreatorVOByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_MediaCreatorVO_> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_MediaCreatorVO_, 'mediaCreatorController.getMediaCreatorVOByIdUsingGET', Config>;
      /**
       * ---
       *
       * [POST] listMediaCreatorByPage
       *
       * **path:** /api/media_creator/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   id?: number
       *   mediaType?: string
       *   mediaUrl?: string
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   userId?: number
       *   wordId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«MediaCreator»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       created_at?: string
       *       creator_id?: number
       *       id?: number
       *       info?: string
       *       media_type?: string
       *       media_url?: string
       *       word_id?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listMediaCreatorByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_MediaCreator_> & {
          data: MediaCreatorQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_MediaCreator_,
        'mediaCreatorController.listMediaCreatorByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [POST] listMediaCreatorVOByPage
       *
       * **path:** /api/media_creator/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   id?: number
       *   mediaType?: string
       *   mediaUrl?: string
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   userId?: number
       *   wordId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«MediaCreatorVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       createdAt?: string
       *       creatorId?: number
       *       id?: number
       *       info?: string
       *       mediaType?: string
       *       mediaUrl?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       wordId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listMediaCreatorVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_MediaCreatorVO_> & {
          data: MediaCreatorQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_MediaCreatorVO_,
        'mediaCreatorController.listMediaCreatorVOByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [POST] listMyMediaCreatorVOByPage
       *
       * **path:** /api/media_creator/my/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   id?: number
       *   mediaType?: string
       *   mediaUrl?: string
       *   notId?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   userId?: number
       *   wordId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«MediaCreatorVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       createdAt?: string
       *       creatorId?: number
       *       id?: number
       *       info?: string
       *       mediaType?: string
       *       mediaUrl?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       wordId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listMyMediaCreatorVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_MediaCreatorVO_> & {
          data: MediaCreatorQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_MediaCreatorVO_,
        'mediaCreatorController.listMyMediaCreatorVOByPageUsingPOST',
        Config
      >;
    };
    postController: {
      /**
       * ---
       *
       * [POST] addPost
       *
       * **path:** /api/post/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   tags?: string[]
       *   title?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      addPostUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_long_> & {
          data: PostAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_long_, 'postController.addPostUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] deletePost
       *
       * **path:** /api/post/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      deletePostUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'postController.deletePostUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] editPost
       *
       * **path:** /api/post/edit
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   id?: number
       *   tags?: string[]
       *   title?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      editPostUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: PostEditRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'postController.editPostUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] getPostVOById
       *
       * **path:** /api/post/get/vo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] PostVO
       *   data?: {
       *     content?: string
       *     createTime?: string
       *     favourNum?: number
       *     hasFavour?: boolean
       *     hasThumb?: boolean
       *     id?: number
       *     tagList?: string[]
       *     thumbNum?: number
       *     title?: string
       *     updateTime?: string
       *     // [title] UserVO
       *     user?: {
       *       createTime?: string
       *       id?: number
       *       userAvatar?: string
       *       userName?: string
       *       userProfile?: string
       *       userRole?: string
       *     }
       *     userId?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      getPostVOByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_PostVO_> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_PostVO_, 'postController.getPostVOByIdUsingGET', Config>;
      /**
       * ---
       *
       * [POST] listPostByPage
       *
       * **path:** /api/post/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   favourUserId?: number
       *   id?: number
       *   notId?: number
       *   orTags?: string[]
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«Post»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       favourNum?: number
       *       id?: number
       *       isDelete?: number
       *       tags?: string
       *       thumbNum?: number
       *       title?: string
       *       updateTime?: string
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listPostByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_Post_> & {
          data: PostQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_Post_, 'postController.listPostByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] listPostVOByPage
       *
       * **path:** /api/post/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   favourUserId?: number
       *   id?: number
       *   notId?: number
       *   orTags?: string[]
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«PostVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       favourNum?: number
       *       hasFavour?: boolean
       *       hasThumb?: boolean
       *       id?: number
       *       tagList?: string[]
       *       thumbNum?: number
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listPostVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_PostVO_> & {
          data: PostQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_PostVO_, 'postController.listPostVOByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] listMyPostVOByPage
       *
       * **path:** /api/post/my/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   favourUserId?: number
       *   id?: number
       *   notId?: number
       *   orTags?: string[]
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«PostVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       favourNum?: number
       *       hasFavour?: boolean
       *       hasThumb?: boolean
       *       id?: number
       *       tagList?: string[]
       *       thumbNum?: number
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listMyPostVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_PostVO_> & {
          data: PostQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_PostVO_, 'postController.listMyPostVOByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] searchPostVOByPage
       *
       * **path:** /api/post/search/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   favourUserId?: number
       *   id?: number
       *   notId?: number
       *   orTags?: string[]
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«PostVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       favourNum?: number
       *       hasFavour?: boolean
       *       hasThumb?: boolean
       *       id?: number
       *       tagList?: string[]
       *       thumbNum?: number
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      searchPostVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_PostVO_> & {
          data: PostQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_PostVO_, 'postController.searchPostVOByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] updatePost
       *
       * **path:** /api/post/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   id?: number
       *   tags?: string[]
       *   title?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      updatePostUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: PostUpdateRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'postController.updatePostUsingPOST', Config>;
    };
    postFavourController: {
      /**
       * ---
       *
       * [POST] doPostFavour
       *
       * **path:** /api/post_favour/
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   postId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      doPostFavourUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_int_> & {
          data: PostFavourAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_int_, 'postFavourController.doPostFavourUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] listFavourPostByPage
       *
       * **path:** /api/post_favour/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   pageSize?: number
       *   // [title] PostQueryRequest
       *   postQueryRequest?: {
       *     content?: string
       *     current?: number
       *     favourUserId?: number
       *     id?: number
       *     notId?: number
       *     orTags?: string[]
       *     pageSize?: number
       *     searchText?: string
       *     sortField?: string
       *     sortOrder?: string
       *     tags?: string[]
       *     title?: string
       *     userId?: number
       *   }
       *   sortField?: string
       *   sortOrder?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«PostVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       favourNum?: number
       *       hasFavour?: boolean
       *       hasThumb?: boolean
       *       id?: number
       *       tagList?: string[]
       *       thumbNum?: number
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listFavourPostByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_PostVO_> & {
          data: PostFavourQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_PostVO_, 'postFavourController.listFavourPostByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] listMyFavourPostByPage
       *
       * **path:** /api/post_favour/my/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   current?: number
       *   favourUserId?: number
       *   id?: number
       *   notId?: number
       *   orTags?: string[]
       *   pageSize?: number
       *   searchText?: string
       *   sortField?: string
       *   sortOrder?: string
       *   tags?: string[]
       *   title?: string
       *   userId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«PostVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       content?: string
       *       createTime?: string
       *       favourNum?: number
       *       hasFavour?: boolean
       *       hasThumb?: boolean
       *       id?: number
       *       tagList?: string[]
       *       thumbNum?: number
       *       title?: string
       *       updateTime?: string
       *       // [title] UserVO
       *       user?: {
       *         createTime?: string
       *         id?: number
       *         userAvatar?: string
       *         userName?: string
       *         userProfile?: string
       *         userRole?: string
       *       }
       *       userId?: number
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listMyFavourPostByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_PostVO_> & {
          data: PostQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_PostVO_, 'postFavourController.listMyFavourPostByPageUsingPOST', Config>;
    };
    postThumbController: {
      /**
       * ---
       *
       * [POST] doThumb
       *
       * **path:** /api/post_thumb/
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   postId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      doThumbUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_int_> & {
          data: PostThumbAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_int_, 'postThumbController.doThumbUsingPOST', Config>;
    };
    userController: {
      /**
       * ---
       *
       * [POST] addUser
       *
       * **path:** /api/user/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   userAccount?: string
       *   userAvatar?: string
       *   userName?: string
       *   userRole?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      addUserUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_long_> & {
          data: UserAddRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_long_, 'userController.addUserUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] getDailyQuote
       *
       * **path:** /api/user/dailyquote
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string
       * ```
       */
      getDailyQuoteUsingGET<Config extends Alova2MethodConfig<string>>(
        config?: Config
      ): Alova2Method<string, 'userController.getDailyQuoteUsingGET', Config>;
      /**
       * ---
       *
       * [POST] deleteUser
       *
       * **path:** /api/user/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      deleteUserUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: DeleteRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'userController.deleteUserUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] getUserById
       *
       * **path:** /api/user/get
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] User
       *   data?: {
       *     createTime?: string
       *     id?: number
       *     isDelete?: number
       *     mpOpenId?: string
       *     unionId?: string
       *     updateTime?: string
       *     userAccount?: string
       *     userAvatar?: string
       *     userName?: string
       *     userPassword?: string
       *     userProfile?: string
       *     userRole?: string
       *   }
       *   message?: string
       * }
       * ```
       */
      getUserByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_User_> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_User_, 'userController.getUserByIdUsingGET', Config>;
      /**
       * ---
       *
       * [GET] getLoginUser
       *
       * **path:** /api/user/get/login
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] LoginUserVO
       *   data?: {
       *     createTime?: string
       *     id?: number
       *     updateTime?: string
       *     userAvatar?: string
       *     userName?: string
       *     userProfile?: string
       *     userRole?: string
       *   }
       *   message?: string
       * }
       * ```
       */
      getLoginUserUsingGET<Config extends Alova2MethodConfig<BaseResponse_LoginUserVO_>>(
        config?: Config
      ): Alova2Method<BaseResponse_LoginUserVO_, 'userController.getLoginUserUsingGET', Config>;
      /**
       * ---
       *
       * [GET] getUserVOById
       *
       * **path:** /api/user/get/vo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] UserVO
       *   data?: {
       *     createTime?: string
       *     id?: number
       *     userAvatar?: string
       *     userName?: string
       *     userProfile?: string
       *     userRole?: string
       *   }
       *   message?: string
       * }
       * ```
       */
      getUserVOByIdUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_UserVO_> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_UserVO_, 'userController.getUserVOByIdUsingGET', Config>;
      /**
       * ---
       *
       * [POST] listUserByPage
       *
       * **path:** /api/user/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   id?: number
       *   mpOpenId?: string
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   unionId?: string
       *   userName?: string
       *   userProfile?: string
       *   userRole?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«User»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       createTime?: string
       *       id?: number
       *       isDelete?: number
       *       mpOpenId?: string
       *       unionId?: string
       *       updateTime?: string
       *       userAccount?: string
       *       userAvatar?: string
       *       userName?: string
       *       userPassword?: string
       *       userProfile?: string
       *       userRole?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listUserByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_User_> & {
          data: UserQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_User_, 'userController.listUserByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] listUserVOByPage
       *
       * **path:** /api/user/list/page/vo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   current?: number
       *   id?: number
       *   mpOpenId?: string
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       *   unionId?: string
       *   userName?: string
       *   userProfile?: string
       *   userRole?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«UserVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       createTime?: string
       *       id?: number
       *       userAvatar?: string
       *       userName?: string
       *       userProfile?: string
       *       userRole?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listUserVOByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_UserVO_> & {
          data: UserQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_Page_UserVO_, 'userController.listUserVOByPageUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] userLoginToken
       *
       * **path:** /api/user/login/token
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   deviceId?: string
       *   deviceType?: string
       *   platform?: string
       *   userAccount?: string
       *   userPassword?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] AuthUserVO
       *   data?: {
       *     // [title] SaTokenInfo
       *     token?: {
       *       isLogin?: boolean
       *       loginDeviceType?: string
       *       loginId?: object
       *       loginType?: string
       *       sessionTimeout?: number
       *       tag?: string
       *       tokenActiveTimeout?: number
       *       tokenName?: string
       *       tokenSessionTimeout?: number
       *       tokenTimeout?: number
       *       tokenValue?: string
       *     }
       *     // [title] LoginUserVO
       *     user?: {
       *       createTime?: string
       *       id?: number
       *       updateTime?: string
       *       userAvatar?: string
       *       userName?: string
       *       userProfile?: string
       *       userRole?: string
       *     }
       *   }
       *   message?: string
       * }
       * ```
       */
      userLoginTokenUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_AuthUserVO_> & {
          data: UserLoginRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_AuthUserVO_, 'userController.userLoginTokenUsingPOST', Config>;
      /**
       * ---
       *
       * [GET] userLoginByWxOpen
       *
       * **path:** /api/user/login/wx_open
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // code
       *   // [required]
       *   code: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] LoginUserVO
       *   data?: {
       *     createTime?: string
       *     id?: number
       *     updateTime?: string
       *     userAvatar?: string
       *     userName?: string
       *     userProfile?: string
       *     userRole?: string
       *   }
       *   message?: string
       * }
       * ```
       */
      userLoginByWxOpenUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_LoginUserVO_> & {
          params: {
            /**
             * code
             * [required]
             */
            code: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_LoginUserVO_, 'userController.userLoginByWxOpenUsingGET', Config>;
      /**
       * ---
       *
       * [POST] userLogout
       *
       * **path:** /api/user/logout
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      userLogoutUsingPOST<Config extends Alova2MethodConfig<BaseResponse_boolean_>>(
        config?: Config
      ): Alova2Method<BaseResponse_boolean_, 'userController.userLogoutUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] userRegister
       *
       * **path:** /api/user/register
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   checkPassword?: string
       *   userAccount?: string
       *   userPassword?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: number
       *   message?: string
       * }
       * ```
       */
      userRegisterUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_long_> & {
          data: UserRegisterRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_long_, 'userController.userRegisterUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] updateUser
       *
       * **path:** /api/user/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       *   userAvatar?: string
       *   userName?: string
       *   userProfile?: string
       *   userRole?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      updateUserUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: UserUpdateRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'userController.updateUserUsingPOST', Config>;
      /**
       * ---
       *
       * [POST] updateMyUser
       *
       * **path:** /api/user/update/my
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   userAvatar?: string
       *   userName?: string
       *   userProfile?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      updateMyUserUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: UserUpdateMyRequest;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'userController.updateMyUserUsingPOST', Config>;
    };
    userConfigController: {
      /**
       * ---
       *
       * [GET] getCurrentUserConfig
       *
       * **path:** /api/user_config/get
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] UserConfigVO
       *   data?: {
       *     privateConfig?: object
       *     publicConfig?: object
       *   }
       *   message?: string
       * }
       * ```
       */
      getCurrentUserConfigUsingGET<Config extends Alova2MethodConfig<BaseResponse_UserConfigVO_>>(
        config?: Config
      ): Alova2Method<BaseResponse_UserConfigVO_, 'userConfigController.getCurrentUserConfigUsingGET', Config>;
      /**
       * ---
       *
       * [GET] getPublicUserConfig
       *
       * **path:** /api/user_config/public
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] UserConfigVO
       *   data?: {
       *     privateConfig?: object
       *     publicConfig?: object
       *   }
       *   message?: string
       * }
       * ```
       */
      getPublicUserConfigUsingGET<
        Config extends Alova2MethodConfig<BaseResponse_UserConfigVO_> & {
          params: {
            /**
             * id
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_UserConfigVO_, 'userConfigController.getPublicUserConfigUsingGET', Config>;
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/user_config/select
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] UserConfigVO
       *   data?: {
       *     privateConfig?: object
       *     publicConfig?: object
       *   }
       *   message?: string
       * }
       * ```
       */
      selectOneUsingGET_11<
        Config extends Alova2MethodConfig<BaseResponse_UserConfigVO_> & {
          params: {
            /**
             * id
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_UserConfigVO_, 'userConfigController.selectOneUsingGET_11', Config>;
      /**
       * ---
       *
       * [POST] updateCurrentUserConfig
       *
       * **path:** /api/user_config/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   privateConfig?: object
       *   publicConfig?: object
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   data?: boolean
       *   message?: string
       * }
       * ```
       */
      updateCurrentUserConfigUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_boolean_> & {
          data: UserConfigVO;
        }
      >(
        config: Config
      ): Alova2Method<BaseResponse_boolean_, 'userConfigController.updateCurrentUserConfigUsingPOST', Config>;
    };
    wordStatusChangeController: {
      /**
       * ---
       *
       * [POST] listStatusChangeByPage
       *
       * **path:** /api/word_status_change/list/page
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   comment?: string
       *   current?: number
       *   id?: number
       *   pageSize?: number
       *   sortField?: string
       *   sortOrder?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   // [title] Page«WordStatusChangeVO»
       *   data?: {
       *     countId?: string
       *     current?: number
       *     maxLimit?: number
       *     optimizeCountSql?: boolean
       *     orders?: Array<{
       *       asc?: boolean
       *       column?: string
       *     }>
       *     pages?: number
       *     records?: Array<{
       *       comment?: string
       *       createTime?: string
       *       id?: number
       *       info?: string
       *       status?:
       *         | 'UNKNOWN'
       *         | 'DRAFT'
       *         | 'CREATED'
       *         | 'PROCESSING'
       *         | 'SUPPLYING'
       *         | 'SUPPLIED'
       *         | 'STRUCTURE_FIXING'
       *         | 'STRUCTURED'
       *         | 'IMAGING'
       *         | 'PROCESSED'
       *         | 'WAIT_FOR_AI_REVIEW'
       *         | 'REVIEWING'
       *         | 'DATA_FORMAT_ERROR'
       *         | 'REJECTED'
       *         | 'FAILED'
       *         | 'PUBLISHED'
       *         | 'UNPUBLISHED'
       *         | 'APPROVED'
       *         | 'UPLOADED'
       *         | 'UPLOADING'
       *         | 'IMPORTING'
       *         | 'EXPORTING'
       *         | 'EXPORTED'
       *         | 'DELETED'
       *         | 'IN_QUEUE'
       *       updateTime?: string
       *       wordId?: number
       *       word_head?: string
       *     }>
       *     searchCount?: boolean
       *     size?: number
       *     total?: number
       *   }
       *   message?: string
       * }
       * ```
       */
      listStatusChangeByPageUsingPOST<
        Config extends Alova2MethodConfig<BaseResponse_Page_WordStatusChangeVO_> & {
          data: EnglishWordStatusChangeQueryRequest;
        }
      >(
        config: Config
      ): Alova2Method<
        BaseResponse_Page_WordStatusChangeVO_,
        'wordStatusChangeController.listStatusChangeByPageUsingPOST',
        Config
      >;
      /**
       * ---
       *
       * [GET] listRecord
       *
       * **path:** /api/word_status_change/list/record
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // lastId
       *   lastId?: number
       *   // wordId
       *   // [required]
       *   wordId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = object
       * ```
       */
      listRecordUsingGET<
        Config extends Alova2MethodConfig<object> & {
          params: {
            /**
             * lastId
             */
            lastId?: number;
            /**
             * wordId
             * [required]
             */
            wordId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<object, 'wordStatusChangeController.listRecordUsingGET', Config>;
      /**
       * ---
       *
       * [GET] selectOne
       *
       * **path:** /api/word_status_change/selectOne
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // id
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   comment?: string
       *   createTime?: string
       *   id?: number
       *   info?: string
       *   isDelete?: number
       *   status?: string
       *   updateTime?: string
       *   wordId?: number
       * }
       * ```
       */
      selectOneUsingGET_12<
        Config extends Alova2MethodConfig<WordStatusChange> & {
          params: {
            /**
             * id
             */
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<WordStatusChange, 'wordStatusChangeController.selectOneUsingGET_12', Config>;
    };
  }

  var Apis: Apis;
}
