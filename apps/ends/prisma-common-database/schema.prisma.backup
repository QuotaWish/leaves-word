generator client {
  provider = "prisma-client-js"
  output   = "../prisma-common-database/common-database-client-types"
}

datasource db {
  provider = "mysql"
  url      = env("COMMON_DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audio_file {
  id          BigInt    @id @default(autoincrement())
  path        String?   @db.VarChar(255)
  content     String?   @db.MediumText
  creator_id  BigInt?
  created_at  DateTime? @default(now()) @db.DateTime(0)
  update_time DateTime? @default(now()) @db.DateTime(0)
  is_delete   Int?      @default(0)
  status      String    @default("UNKNOWN") @db.VarChar(50)
  name        String    @default("默认音频文件") @db.VarChar(255)
  user        user?     @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audio_file_ibfk_1")

  @@index([creator_id], map: "creator_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model category {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  parent_id   Int?      @default(0) @db.UnsignedInt
  name        String    @db.VarChar(100)
  sort_order  Int?      @default(0)
  description String?   @db.VarChar(500)
  is_root     Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.DateTime(0)
  updated_at  DateTime? @default(now()) @db.DateTime(0)

  @@index([parent_id], map: "idx_parent_id")
  @@index([sort_order], map: "idx_sort_order")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model dictionary_category {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  dictionary_id BigInt    @db.UnsignedBigInt
  category_id   Int       @db.UnsignedInt
  sort_order    Int?      @default(0)
  created_at    DateTime? @default(now()) @db.DateTime(0)

  @@index([category_id], map: "idx_category_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model dictionary_word {
  dictionary_id      BigInt
  word_id            BigInt
  created_at         DateTime?          @default(now()) @db.Timestamp(0)
  id                 BigInt
  english_dictionary english_dictionary @relation(fields: [dictionary_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "dictionary_word_ibfk_1")
  english_word       english_word       @relation(fields: [word_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "dictionary_word_ibfk_2")

  @@id(id)
  @@index([word_id], map: "word_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model english_dictionary {
  id               BigInt            @id
  name             String?           @db.VarChar(255)
  description      String?           @db.Text
  image_url        String?           @db.VarChar(255)
  author           String?           @db.VarChar(255)
  isbn             String?           @db.VarChar(13)
  publication_date DateTime?         @db.Date
  publisher        String?           @db.VarChar(255)
  created_at       DateTime?         @default(now()) @db.Timestamp(0)
  update_time      DateTime?         @default(now()) @db.Timestamp(0)
  is_delete        Boolean?          @default(false)
  total_words      Int?              @default(0)
  published_words  Int?              @default(0)
  approved_words   Int?              @default(0)
  dictionary_word  dictionary_word[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model english_word {
  id                      BigInt                    @id
  word_head               String?                   @db.VarChar(255)
  thumbnail               String?                   @db.VarChar(255)
  info                    Json?
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  update_time             DateTime?                 @default(now()) @db.Timestamp(0)
  is_delete               Boolean?                  @default(false)
  status                  String?                   @db.VarChar(255)
  manual_score            Int?                      @default(0)
  ai_score                Int?
  reviewer                BigInt?
  difficulty_level        Int?                      @default(1) // 单词难度级别
  dictionary_word         dictionary_word[]
  english_word_change_log english_word_change_log[]
  media_creator           media_creator[]
  learning_progress       learning_progress[] // 用户学习此单词的进度
  collection_words        collection_word[] // 包含此单词的集合

  @@index([word_head], map: "idx_word_head")
  @@index([difficulty_level], map: "idx_difficulty")
  @@index([status], map: "idx_word_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model english_word_change_log {
  id              BigInt       @id
  english_word_id BigInt
  field_name      String       @db.VarChar(255)
  old_value       String?      @db.Text
  new_value       String?      @db.Text
  change_time     DateTime     @default(now()) @db.Timestamp(0)
  changed_by      BigInt?
  english_word    english_word @relation(fields: [english_word_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "english_word_change_log_ibfk_1")

  @@index([english_word_id], map: "english_word_id")
}

model media_creator {
  id           BigInt       @id @default(autoincrement())
  word_id      BigInt
  media_type   String       @db.VarChar(50)
  media_url    String?      @db.VarChar(255)
  creator_id   BigInt?
  info         String?      @db.Text
  created_at   DateTime?    @default(now()) @db.Timestamp(0)
  english_word english_word @relation(fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_creator_ibfk_1")

  @@index([word_id], map: "word_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post {
  id         BigInt   @id @default(autoincrement())
  title      String?  @db.VarChar(512)
  content    String?  @db.Text
  tags       String?  @db.VarChar(1024)
  thumbNum   Int      @default(0)
  favourNum  Int      @default(0)
  userId     BigInt
  createTime DateTime @default(now()) @db.DateTime(0)
  updateTime DateTime @default(now()) @db.DateTime(0)
  isDelete   Int      @default(0) @db.TinyInt

  @@index([userId], map: "idx_userId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post_favour {
  id         BigInt   @id @default(autoincrement())
  postId     BigInt
  userId     BigInt
  createTime DateTime @default(now()) @db.DateTime(0)
  updateTime DateTime @default(now()) @db.DateTime(0)

  @@index([postId], map: "idx_postId")
  @@index([userId], map: "idx_userId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post_thumb {
  id         BigInt   @id @default(autoincrement())
  postId     BigInt
  userId     BigInt
  createTime DateTime @default(now()) @db.DateTime(0)
  updateTime DateTime @default(now()) @db.DateTime(0)

  @@index([postId], map: "idx_postId")
  @@index([userId], map: "idx_userId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  id                  BigInt              @id @default(autoincrement())
  userAccount         String              @db.VarChar(256)
  userPassword        String              @db.VarChar(512)
  unionId             String?             @db.VarChar(256)
  mpOpenId            String?             @db.VarChar(256)
  userName            String?             @db.VarChar(256)
  userAvatar          String?             @db.VarChar(1024)
  userProfile         String?             @db.VarChar(512)
  userRole            String              @default("user") @db.VarChar(256)
  createTime          DateTime            @default(now()) @db.DateTime(0)
  updateTime          DateTime            @default(now()) @db.DateTime(0)
  isDelete            Int                 @default(0) @db.TinyInt
  audio_file          audio_file[]
  user_config         user_config?
  user_achievements   user_achievement[]
  game_records        game_record[]
  user_points         user_points?
  learning_progresses learning_progress[]
  learning_stats      learning_stats?
  study_plans         study_plan[]
  word_collections    word_collection[]

  @@index([unionId], map: "idx_unionId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_config {
  user_id     BigInt    @id
  config_json Json
  update_time DateTime? @default(now()) @db.DateTime(0)
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_config_ibfk_1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model word_status_change {
  id          BigInt    @id @default(autoincrement())
  word_id     BigInt
  status      String    @db.VarChar(255)
  info        Json?
  comment     String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.DateTime(0)
  update_time DateTime? @default(now()) @db.DateTime(0)
  is_delete   Int?      @default(0)
}

/// 游戏记录模型 - 记录用户的游戏活动
model game_record {
  id            BigInt   @id @default(autoincrement())
  user_id       BigInt
  game_type     String   @db.VarChar(50) // 游戏类型，如：单词配对、拼写挑战等
  score         Int      @default(0) // 游戏得分
  duration      Int      @default(0) // 游戏时长（秒）
  words_count   Int      @default(0) // 涉及的单词数量
  correct_count Int      @default(0) // 正确回答的数量
  wrong_count   Int      @default(0) // 错误回答的数量
  level         Int      @default(1) // 游戏难度级别
  game_data     Json? // 游戏详细数据，如单词ID列表等
  created_at    DateTime @default(now()) @db.DateTime(0)
  update_time   DateTime @default(now()) @db.DateTime(0)
  is_delete     Int      @default(0) @db.TinyInt
  user          user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_id")
  @@index([game_type], map: "idx_game_type")
  @@index([created_at], map: "idx_created_at")
}

/// 用户积分模型 - 记录用户的积分情况
model user_points {
  id                 BigInt              @id @default(autoincrement())
  user_id            BigInt              @unique
  total_points       Int                 @default(0) // 总积分
  available_points   Int                 @default(0) // 可用积分
  level              Int                 @default(1) // 用户等级
  created_at         DateTime            @default(now()) @db.DateTime(0)
  update_time        DateTime            @default(now()) @db.DateTime(0)
  user               user                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  point_transactions point_transaction[]

  @@index([level], map: "idx_level")
}

/// 积分交易记录 - 记录积分的获取和消费
model point_transaction {
  id             BigInt      @id @default(autoincrement())
  user_points_id BigInt
  amount         Int // 积分数量，正数为获取，负数为消费
  type           String      @db.VarChar(50) // 交易类型：游戏奖励、每日登录、购买物品等
  description    String?     @db.VarChar(255) // 交易描述
  reference_id   String?     @db.VarChar(100) // 关联ID，如游戏ID、商品ID等
  created_at     DateTime    @default(now()) @db.DateTime(0)
  user_points    user_points @relation(fields: [user_points_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_points_id], map: "idx_user_points_id")
  @@index([type], map: "idx_transaction_type")
  @@index([created_at], map: "idx_transaction_time")
}

/// 学习进度模型 - 记录用户对单词的学习进度，使用JSON存储详细学习信息
model learning_progress {
  id               BigInt    @id @default(autoincrement()) // 使用自增主键
  user_id          BigInt
  word_id          BigInt
  action_type      String // 动作类型
  learning_details Json? // 详细学习信息的JSON数据
  created_at       DateTime  @default(now()) @db.DateTime(0)
  update_time      DateTime  @default(now()) @db.DateTime(0)
  is_delete        Int       @default(0) @db.TinyInt
  study_plan_id    BigInt? // 可选字段，记录属于哪个学习计划（如果有）
  source           String?   @db.VarChar(50) // 来源：APP、WEB、AI等
  device_info      Json? // 设备信息：如 UA、平台、版本等
  attempt_count    Int       @default(1) // 第几次学习这个单词
  start_time       DateTime? @db.DateTime(0) // 可选字段，学习开始时间
  end_time         DateTime? @db.DateTime(0) // 可选字段，学习结束时间

  user       user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  word       english_word @relation(fields: [word_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  study_plan study_plan?  @relation(fields: [study_plan_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([user_id], map: "idx_learning_user_id")
  @@index([word_id], map: "idx_learning_word_id")
  @@index([study_plan_id], map: "idx_learning_study_plan_id") // 为学习计划字段添加索引
}

/// 学习统计模型 - 记录用户的学习统计数据
model learning_stats {
  id                  BigInt             @id @default(autoincrement())
  user_id             BigInt             @unique
  total_words_learned Int                @default(0) // 已学习的单词总数
  total_review_time   Int                @default(0) // 总复习时间（秒）
  daily_streak        Int                @default(0) // 连续学习天数
  longest_streak      Int                @default(0) // 最长连续学习天数
  last_study_date     DateTime?          @db.Date // 上次学习日期
  total_study_days    Int                @default(0) // 总学习天数
  created_at          DateTime           @default(now()) @db.DateTime(0)
  update_time         DateTime           @default(now()) @db.DateTime(0)
  user                user               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_achievements   user_achievement[]

  @@index([daily_streak], map: "idx_daily_streak")
}

/// 成就定义模型 - 系统中所有可获得的成就
model achievement {
  id                BigInt             @id @default(autoincrement())
  name              String             @db.VarChar(100) // 成就名称
  description       String             @db.VarChar(500) // 成就描述
  icon_url          String?            @db.VarChar(255) // 成就图标URL
  category          String             @db.VarChar(50) // 成就类别：学习、游戏、社交等
  points            Int                @default(10) // 获得此成就奖励的积分
  requirements      Json? // 获得成就的条件
  created_at        DateTime           @default(now()) @db.DateTime(0)
  update_time       DateTime           @default(now()) @db.DateTime(0)
  is_delete         Int                @default(0) @db.TinyInt
  user_achievements user_achievement[]

  @@index([category], map: "idx_achievement_category")
}

/// 用户成就模型 - 记录用户获得的成就
model user_achievement {
  id                BigInt          @id @default(autoincrement())
  user_id           BigInt
  achievement_id    BigInt
  achieved_date     DateTime        @default(now()) @db.DateTime(0)
  progress          Int?            @default(0) // 进度百分比（对于渐进式成就）
  learning_stats    learning_stats? @relation(fields: [learning_stats_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  learning_stats_id BigInt?
  achievement       achievement     @relation(fields: [achievement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              user            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, achievement_id])
  @@index([achievement_id], map: "idx_achievement_id")
  @@index([achieved_date], map: "idx_achieved_date")
}

/// 学习计划模型 - 用户创建的学习计划
model study_plan {
  id                  BigInt              @id @default(autoincrement())
  user_id             BigInt
  name                String              @db.VarChar(100) // 计划名称
  description         String?             @db.VarChar(500) // 计划描述
  target_words        Int                 @default(0) // 目标单词数量
  daily_words         Int                 @default(10) // 每日学习单词数量
  start_date          DateTime?           @db.Date // 计划开始日期
  end_date            DateTime?           @db.Date // 计划结束日期
  status              String              @default("ACTIVE") @db.VarChar(20) // 状态：ACTIVE, COMPLETED, PAUSED
  created_at          DateTime            @default(now()) @db.DateTime(0)
  update_time         DateTime            @default(now()) @db.DateTime(0)
  is_delete           Int                 @default(0) @db.TinyInt
  user                user                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  word_collections    word_collection[]
  learning_progresses learning_progress[]

  @@index([user_id], map: "idx_plan_user_id")
  @@index([status], map: "idx_plan_status")
}

/// 单词集合模型 - 用户创建的单词集合
model word_collection {
  id               BigInt            @id @default(autoincrement())
  user_id          BigInt
  plan_id          BigInt?
  name             String            @db.VarChar(100) // 集合名称
  description      String?           @db.VarChar(500) // 集合描述
  is_public        Boolean           @default(false) // 是否公开
  word_count       Int               @default(0) // 单词数量
  created_at       DateTime          @default(now()) @db.DateTime(0)
  update_time      DateTime          @default(now()) @db.DateTime(0)
  is_delete        Int               @default(0) @db.TinyInt
  user             user              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  study_plan       study_plan?       @relation(fields: [plan_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  collection_words collection_word[]

  @@index([user_id], map: "idx_collection_user_id")
  @@index([is_public], map: "idx_is_public")
}

/// 集合单词关联模型 - 关联单词集合和单词
model collection_word {
  id            BigInt          @id @default(autoincrement())
  collection_id BigInt
  word_id       BigInt
  added_time    DateTime        @default(now()) @db.DateTime(0)
  sort_order    Int             @default(0) // 排序顺序
  note          String?         @db.VarChar(500) // 用户对该单词的笔记
  collection    word_collection @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  word          english_word    @relation(fields: [word_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([collection_id, word_id])
  @@index([word_id], map: "idx_collection_word_id")
}
