apiVersion: oam.coding.net/v1alpha2
kind: TraitIndex
metadata:
  name: TraitIndex
spec:
  traitList:
  - apiVersion: apps/v1
    avatar: annotation
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 annotation
      # patch 类型的插件，作用对象类型 Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        labels:
          coding.oam.trait/annotation: "true"
        annotations:
          {{.anno_key}}: {{.anno_value}}
    createTime: 2024-08-17T09:57:35.134Z
    creatorId: 9152296
    deleted: false
    description: 把额外的元信息打到服务注解上，用于外部系统查找或控制
    id: 0
    name: 注解
    pattern: PATCH
    seq: annotation
    status: ENABLE
    targetType: Deployment
    teamId: 4211598
    updateTime: 2024-08-17T09:57:35.134Z
  - apiVersion: apps/v1
    avatar: graceful-shutdown
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 graceful-shutdown
      # patch 类型的插件，作用对象类型 Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        labels:
          coding.oam.trait/graceful-shutdown: "true"
      spec:
        template:
          spec:
            terminationGracePeriodSeconds: {{.grace_period_seconds}}
            containers:
            - name: {{.name}}
              {{- if .pre_stop_hook}}
              lifecycle:
                preStop:
                  {{- if .pre_stop_hook.http_hook}}
                  httpGet:
                    path: {{.pre_stop_hook.http_hook.path}}
                    port: {{.pre_stop_hook.http_hook.port}}
                    httpHeaders:
                    {{- range .pre_stop_hook.http_hook.headers}}
                    - name: {{.name}}
                      value: {{.value | quote}}
                    {{- end}}
                  {{- end}}
                  {{- if .pre_stop_hook.cmd_hook}}
                  exec:
                    command:
                    {{- range .pre_stop_hook.cmd_hook.cmd}}
                    - {{.}}
                    {{- end}}
                  {{- end}}
              {{- end}}
    createTime: 2024-08-17T09:57:35.596Z
    creatorId: 9152296
    deleted: false
    description: |-
      K8S 会自动进行故障恢复，负载均衡。处理好优雅关闭可以在 K8S 进行容器调度操作时，减少对用户流量的影响。
      K8S 优雅关闭的流程：
      1. 摘除流量
      2. 执行 preStop hook
      3. （同时）发送 SIGTERM 给容器进程
      4. 等待“优雅关闭等待时间”
      5. 发送 SIGKILL 强行杀死容器进程
    id: 0
    name: 优雅关闭
    pattern: PATCH
    seq: graceful-shutdown
    status: ENABLE
    targetType: Deployment
    teamId: 4211598
    updateTime: 2024-08-17T09:57:35.596Z
  - apiVersion: apps/v1
    avatar: ignore-canary-annotation
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 ignore-canary-annotation
      # patch 类型的插件，作用对象类型 Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        annotations:
          oam.coding.net/ignore-canary: "true"
    createTime: 2024-08-17T09:57:36.077Z
    creatorId: 9152296
    deleted: false
    description: 启用该插件的服务将不会在部署策略中被部署到灰度环境
    id: 0
    name: 禁用灰度
    pattern: PATCH
    seq: ignore-canary-annotation
    status: ENABLE
    targetType: All
    teamId: 4211598
    updateTime: 2024-08-17T09:57:36.077Z
  - apiVersion: apps/v1
    avatar: label
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 label
      # patch 类型的插件，作用对象类型 Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        labels:
          coding.oam.trait/label: "true"
          {{.label_key}}: {{.label_value}}
    createTime: 2024-08-17T09:57:36.543Z
    creatorId: 9152296
    deleted: false
    description: 把额外的元信息打到服务标签上，用于外部系统查找或控制
    id: 0
    name: 标签
    pattern: PATCH
    seq: label
    status: ENABLE
    targetType: Deployment
    teamId: 4211598
    updateTime: 2024-08-17T09:57:36.543Z
  - apiVersion: apps/v1
    avatar: liveness_probe
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 liveness-probe
      # patch 类型的插件，作用对象类型 Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        labels:
          coding.oam.trait/liveness-probe: "true"
      spec:
        template:
          spec:
            containers:
            - name: {{.name}}
              livenessProbe:
                {{- if .http_probe}}
                httpGet:
                  path: {{.http_probe.path}}
                  port: {{.http_probe.port}}
                  httpHeaders:
                  {{- range .http_probe.headers}}
                  - name: {{.name}}
                    value: {{.value | quote}}
                  {{- end}}
                {{- end}}
                {{- if .cmd_probe}}
                exec:
                  command:
                  {{- range .cmd_probe.cmd}}
                  - {{.}}
                  {{- end}}
                {{- end}}
                {{- if .tcp_probe}}
                tcpSocket:
                  port: {{.tcp_probe.port}}
                {{- end}}
                initialDelaySeconds: {{.init_delay}}
                {{- if .period_seconds}}
                periodSeconds: {{.period_seconds}}
                {{- end}}
                {{- if .timeout_seconds}}
                timeoutSeconds: {{.timeout_seconds}}
                {{- end}}
                {{- if .failure_threadhold}}
                failureThreshold: {{.failure_threadhold}}
                {{- end}}
    createTime: 2024-08-17T09:57:37.009Z
    creatorId: 9152296
    deleted: false
    description: 指示容器是否正在运行。K8S 持续探测服务的探针，当探测失败时会重启容器
    id: 0
    name: 存活探针
    pattern: PATCH
    seq: liveness-probe
    status: ENABLE
    targetType: Deployment
    teamId: 4211598
    updateTime: 2024-08-17T09:57:37.009Z
  - apiVersion: apps/v1
    avatar: metrics-expose
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 metrics-expose
      # patch 类型的插件，作用对象类型 Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        labels:
          coding.oam.trait/metrics-expose: "true"
        annotations:
          prometheus.io/port: {{.prom_port|quote}}
          prometheus.io/scrape: "true"
          {{- if .prom_path}}
          prometheus.io/path: {{.prom_path}}
          {{end -}}
    createTime: 2024-08-17T09:57:37.464Z
    creatorId: 9152296
    deleted: false
    description: 监控暴露
    id: 0
    name: 监控暴露
    pattern: PATCH
    seq: metrics-expose
    status: ENABLE
    targetType: Deployment
    teamId: 4211598
    updateTime: 2024-08-17T09:57:37.464Z
  - apiVersion: v1
    avatar: nginx-ingress
    content: "#运维插件的定义\n#假设运维插件的 id 和 name 都是 nginx-ingress\napiVersion: networking.k8s.io/v1\n\
      kind: Ingress\nmetadata:\n  name: {{.name}}-ingress\n  namespace: {{.namespace}}\n\
      spec:\n  ingressClassName: nginx\n  {{- if .https.enable}}\n  tls:\n    - hosts:\n\
      \      - {{.host|quote}}\n      secretName: {{ .https.tls}}\n  {{- end}}\n \
      \ rules:\n  - host: {{.host|quote}}\n    http:\n      paths:\n     {{- range\
      \ .paths}}\n      - path: {{.path}} \n        pathType: {{.path_type}}\n   \
      \     backend:\n          service:\n            name: {{$.name}}\n         \
      \   port:\n              number: {{.port}}\n     {{- end}}"
    createTime: 2024-08-17T09:57:37.926Z
    creatorId: 9152296
    deleted: false
    description: |-
      通过 nginx 对外暴露服务。
      K8S 集群版本大于 1.19 且要求先安装 ingress-nginx-controller, 请联系集群管理员安装，或者访问 https://kubernetes.github.io/ingress-nginx/deploy/#quick-start 获取安装方式。
    id: 0
    name: nginx-ingress
    pattern: ADD
    seq: nginx-ingress
    status: ENABLE
    targetType: Service
    teamId: 4211598
    updateTime: 2024-08-17T09:57:37.926Z
  - apiVersion: apps/v1
    avatar: readiness_probe
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 readiness-probe
      # patch 类型的插件，作用对象类型 Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        labels:
          coding.oam.trait/readiness-probe: "true"
      spec:
        template:
          spec:
            containers:
            - name: {{.name}}
              readinessProbe:
                {{- if .http_probe}}
                httpGet:
                  path: {{.http_probe.path}}
                  port: {{.http_probe.port}}
                  httpHeaders:
                  {{- range .http_probe.headers}}
                  - name: {{.name}}
                    value: {{.value | quote}}
                  {{- end}}
                {{- end}}
                {{- if .cmd_probe}}
                exec:
                  command:
                  {{- range .cmd_probe.cmd}}
                  - {{.}}
                  {{- end}}
                {{- end}}
                {{- if .tcp_probe}}
                tcpSocket:
                  port: {{.tcp_probe.port}}
                {{- end}}
                initialDelaySeconds: {{.init_delay}}
                {{- if .period_seconds}}
                periodSeconds: {{.period_seconds}}
                {{- end}}
                {{- if .timeout_seconds}}
                timeoutSeconds: {{.timeout_seconds}}
                {{- end}}
                {{- if .failure_threadhold}}
                failureThreshold: {{.failure_threadhold}}
                {{- end}}
    createTime: 2024-08-17T09:57:38.387Z
    creatorId: 9152296
    deleted: false
    description: |-
      指示容器是否准备好为请求提供服务。只有服务的就绪探针通过时，服务才能接收通过 Kubernetes Service 而来的流量。
      有时候，服务会暂时性地无法为请求提供服务。 例如，服务在启动时可能需要加载大量的数据或配置文件，或是启动后要依赖等待外部服务。 在这种情况下，既不想杀死应用，也不想给它发送请求。 Kubernetes 提供了就绪探测器来发现并缓解这些情况。
    id: 0
    name: 就绪探针
    pattern: PATCH
    seq: readiness-probe
    status: ENABLE
    targetType: Deployment
    teamId: 4211598
    updateTime: 2024-08-17T09:57:38.387Z
  - apiVersion: apps/v1
    avatar: resource-limit
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 res-limit
      # patch 类型的插件，作用对象类型 Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        labels:
          coding.oam.trait/res-limit: "true"
      spec:
        template:
          spec:
            containers:
            - name: {{.name}}
              resources:
                limits:
                  cpu: {{.cpu_limit}}m
                  memory: {{.mem_limit}}Mi
                requests:
                  cpu: {{.cpu_request}}m
                  memory: {{.mem_request}}Mi
    createTime: 2024-08-17T09:57:38.858Z
    creatorId: 9152296
    deleted: false
    description: 资源限制
    id: 0
    name: 资源限制
    pattern: PATCH
    seq: resource-limit
    status: ENABLE
    targetType: Deployment
    teamId: 4211598
    updateTime: 2024-08-17T09:57:38.858Z
  - apiVersion: apps/v1
    avatar: startup_probe
    content: |-
      #运维插件的定义
      #假设运维插件的 id 和 name 都是 startup-probe
      # patch 类型的插件，作用对象类型 Deployment
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: {{.name}}
        namespace: {{.namespace}}
        labels:
          coding.oam.trait/startup-probe: "true"
      spec:
        template:
          spec:
            containers:
            - name: {{.name}}
              startupProbe:
                {{- if .http_probe}}
                httpGet:
                  path: {{.http_probe.path}}
                  port: {{.http_probe.port}}
                  httpHeaders:
                  {{- range .http_probe.headers}}
                  - name: {{.name}}
                    value: {{.value | quote}}
                  {{- end}}
                {{- end}}
                {{- if .cmd_probe}}
                exec:
                  command:
                  {{- range .cmd_probe.cmd}}
                  - {{.}}
                  {{- end}}
                {{- end}}
                {{- if .tcp_probe}}
                tcpSocket:
                  port: {{.tcp_probe.port}}
                {{- end}}
                initialDelaySeconds: {{.init_delay}}
                {{- if .period_seconds}}
                periodSeconds: {{.period_seconds}}
                {{- end}}
                {{- if .timeout_seconds}}
                timeoutSeconds: {{.timeout_seconds}}
                {{- end}}
                {{- if .failure_threadhold}}
                failureThreshold: {{.failure_threadhold}}
                {{- end}}
    createTime: 2024-08-17T09:57:39.328Z
    creatorId: 9152296
    deleted: false
    description: |-
      指示容器中的应用是否已经启动。K8S 会在启动探针成功后再启用存活探针。
      有时候，会有一些服务在启动时需要较长的初始化时间。 要这种情况下，仅仅用存活探测，参数会非常复杂，设置不慎会导致服务无限重启。 可以通过使用启动探针来为服务设置为足够长的时间来应对糟糕情况下的启动时间。
    id: 0
    name: 启动探针
    pattern: PATCH
    seq: startup-probe
    status: ENABLE
    targetType: Deployment
    teamId: 4211598
    updateTime: 2024-08-17T09:57:39.328Z
